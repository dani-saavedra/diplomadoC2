plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.15.0'
    id "org.sonarqube" version "6.2.0.5505"

}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}
//Forzar la actualizacion de la dependencia transitiva
/*
configurations.all {
	resolutionStrategy {
		force 'com.google.guava:guava:xxx'
	}
}

 */
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    implementation("org.flywaydb:flyway-core:11.8.1")
    implementation("org.flywaydb:flyway-mysql:11.8.1")
    implementation("com.h2database:h2:2.3.232")
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.4.1'
}

tasks.named('test') {
    useJUnitPlatform()
}
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}
/*
build.dependsOn 'pitest'

pitest {
    targetClasses = ['com.example.demo.pruebas.*']
    junit5PluginVersion = '1.2.1'
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    testStrengthThreshold = 86
}*/
